function [traj, infStates] = tapas_rw_shift_vol(r, p, varargin)
% Calculates the trajectories of v under the Rescorla-Wagner learning model
%
% This function can be called in two ways:
% 
% (1) tapas_rw_binary(r, p)
%   
%     where r is the structure generated by tapas_fitModel and p is the parameter vector in native space;
%
% (2) tapas_rw_binary(r, ptrans, 'trans')
% 
%     where r is the structure generated by tapas_fitModel, ptrans is the parameter vector in
%     transformed space, and 'trans' is a flag indicating this.
%
% --------------------------------------------------------------------------------------------------
% Copyright (C) 2012-2013 Christoph Mathys, TNU, UZH & ETHZ
%
% This file is part of the HGF toolbox, which is released under the terms of the GNU General Public
% Licence (GPL), version 3. You can redistribute it and/or modify it under the terms of the GPL
% (either version 3 or, at your option, any later version). For further details, see the file
% COPYING or <http://www.gnu.org/licenses/>.

% Transform paramaters back to their native space if needed
if ~isempty(varargin) && strcmp(varargin{1},'trans');
    p = tapas_rw_shift_vol_transp(r, p);
end

vol = [0 r.vol{1}];

choice = [0; r.y]; % add dummy "zeroth" trial

% Unpack parameters
v_0 = p(1);
al_shift_v  = p(2);
al_stay_v  = p(3);
al_shift_s  = p(4);
al_stay_s  = p(5);

% Add dummy "zeroth" trial
u = [0; r.u(:,1)];
n = length(u);
r_vol = [0 vol];

% Initialize updated quantity: value
v  = NaN(n,1);
da = NaN(n,1);

% Prior
v(1) = v_0;


% Pass through value update loop
for k = 2:1:n    
    if not(ismember(k, r.ign))
        if choice(k) == choice(k-1) % if this is a stay trial, then use that learning rate
            if vol(k) % if this is a volatile trial, then use that learning rate
                al = al_stay_v;
            else
                al = al_stay_s;
            end
        
        else % if this is a shift trial, then use that learning rate
            if vol(k) 
                al = al_shift_v; % if this is a volatile trial, then use that learning rate
            else
                al = al_shift_s;
            end
            
        end
    
        %%%%%%%%%%%%%%%%%%%%%%
        % Effect of input u(k)
        %%%%%%%%%%%%%%%%%%%%%%
        
        % Prediction error
        da(k) = u(k)-v(k-1);
        
        % Value
        v(k) = v(k-1)+al*da(k);
    else
        da(k) = 0;
        v(k)  = v(k-1);
    end
end

% Predicted value
vhat = v;
vhat(end) = [];

% Remove representation priors
v(1)  = [];
da(1) = [];

% Create result data structure
traj = struct;

traj.v     = v;
traj.vhat  = vhat;
traj.da    = da;

% Create matrix (in this case: vector) needed by observation model
infStates = traj.vhat;

return;
